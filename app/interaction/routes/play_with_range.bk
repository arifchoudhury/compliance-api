import re
from flask import request, jsonify, Response
from app.extensions import db
from app.interaction.routes import interaction_blueprint
from compliance_models import Interaction, InteractionCallRecording
from app.utils.helpers import s3_client
import logging

logging.basicConfig(level=logging.INFO)

SUPPORTED_FORMATS = ['mp3', 'wav', 'transcription']
DEFAULT_DURATION_SECONDS = 30  # Adjusted to 60 seconds

def get_bytes_per_second(file_format):
    if file_format == 'mp3':
        bit_rate = 128000  # 128 kbps
        return bit_rate / 8
    elif file_format == 'wav':
        sample_rate = 44100
        bit_depth = 16
        num_channels = 2
        return sample_rate * bit_depth / 8 * num_channels
    return 0

def get_s3_location_parts(s3_location):
    match = re.match(r's3://([^/]+)/(.+)', s3_location)
    if not match:
        return None, None
    return match.group(1), match.group(2)

@interaction_blueprint.route('/<int:interaction_id>/<file_format>', methods=['GET'])
def stream_interaction(interaction_id, file_format):
    if file_format not in SUPPORTED_FORMATS:
        return jsonify({"error": "Unsupported file format"}), 400

    call_recording = InteractionCallRecording.query.filter_by(
        interaction_id=interaction_id,
        file_format=file_format
    ).first()

    if not call_recording:
        return jsonify({"error": "InteractionCallRecording not found for the specified format"}), 404

    bucket_name, file_path = get_s3_location_parts(call_recording.s3_location)
    if not bucket_name or not file_path:
        return jsonify({"error": "Invalid S3 location format"}), 400

    if file_format == 'transcription':
        response = s3_client.get_object(Bucket=bucket_name, Key=file_path)
        file_content = response['Body'].read()
        headers = {
            'Content-Type': 'text/plain',
            'Content-Length': str(len(file_content))
        }
        return Response(file_content, status=200, headers=headers)

    range_header = request.headers.get('Range', None)
    bytes_per_second = get_bytes_per_second(file_format)
    default_bytes = int(bytes_per_second * DEFAULT_DURATION_SECONDS)

    # Determine the byte range to return
    if range_header:
        range_match = re.match(r"bytes=(\d+)-(\d*)", range_header)
        if range_match:
            start = int(range_match.group(1))
            end = range_match.group(2)
            if end:
                end = int(end)
            else:
                end = None
        else:
            start = 0
            end = default_bytes - 1
    else:
        start = 0
        end = default_bytes - 1

    # Get the file size
    file_info = s3_client.head_object(Bucket=bucket_name, Key=file_path)
    file_size = file_info['ContentLength']
    if end is None or end >= file_size:
        end = file_size - 1

    # Fetch the byte range from S3
    response = s3_client.get_object(
        Bucket=bucket_name,
        Key=file_path,
        Range=f"bytes={start}-{end}"
    )

    content_range = f"bytes {start}-{end}/{file_size}"
    headers = {
        'Content-Type': 'audio/mpeg' if file_format == 'mp3' else 'audio/wav',
        'Content-Range': content_range,
        'Accept-Ranges': 'bytes',
        'Content-Length': str(end - start + 1)
    }

    logging.info(f"Streaming {file_format} file for interaction_id {interaction_id}, bytes {start}-{end}/{file_size}")
    return Response(response['Body'].read(), status=206, headers=headers)
